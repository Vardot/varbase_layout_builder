<?php

/**
 * @file
 * Install, update and uninstall functions.
 *
 * Form Varbase Landing page (Layout Builder) module.
 */

use Vardot\Entity\EntityDefinitionUpdateManager;
use Vardot\Installer\ModuleInstallerFactory;

/**
 * Implements hook_install().
 */
function vlplb_install() {

  // Processer for install: in vlplb.info.yml file.
  // --------------------------------------------------------------------------.
  ModuleInstallerFactory::installList('vlplb');

  // Install optional configs.
  ModuleInstallerFactory::importConfigsFromScanedDirectory('vlplb', '/^field.storage.*\\.(yml)$/i');
  ModuleInstallerFactory::importConfigsFromScanedDirectory('vlplb', '/^.*(settings.yml)$/i');

  // --------------------------------------------------------------------------.
  // Entity updates to clear up any mismatched entity and/or field definitions
  // And Fix changes were detected in the entity type and field definitions.
  \Drupal::classResolver()
    ->getInstanceFromDefinition(EntityDefinitionUpdateManager::class)
    ->applyUpdates();

}

/**
 * Issue #3175756: Fix deprecated function getCurrentUserId replaced.
 *
 *  By getDefaultEntityOwner in
 *  core.base_field_override.node.landing_page_lb.uid config.
 */
function vlplb_update_8101() {
  $config_factory = \Drupal::service('config.factory');
  $node_uid_configs = $config_factory->listAll('core.base_field_override.node.');

  // Update for core.base_field_override.node.landing_page_lb.uid
  // And all content types.
  foreach ($node_uid_configs as $node_uid_config) {
    if (substr($node_uid_config, -4) === ".uid") {

      $node_uid_config_factory = $config_factory->getEditable($node_uid_config);
      $default_value_callback = $node_uid_config_factory->get('default_value_callback');

      if (isset($default_value_callback)
        && !empty($default_value_callback)
        && $default_value_callback === 'Drupal\node\Entity\Node::getCurrentUserId') {

        $node_uid_config_factory->set('default_value_callback', 'Drupal\node\Entity\Node::getDefaultEntityOwner')->save(TRUE);
      }
    }
  }

}

/**
 * Issue #3272216: Switch to use the Module Installer Factory.
 *
 * In the Varbase Landing page (Layout Builder) module.
 */
function vlplb_update_90001() {
  // Set the weight of the module after installation of list of modules.
  // To make sure that any hook or event subscriber workes after all used modules.
  ModuleInstallerFactory::setModuleWeightAfterInstallation('vlplb');
}

/**
 * Issue #3301363: Change node_type to entity_bundle.node for default pathauto.
 *
 * Pattern configs for the Landing Page (Layout Builder) content type.
 */
function vlplb_update_90002() {
  // Having a hook update with a copy of pathauto_update_8108()
  // https://git.drupalcode.org/project/pathauto/-/blob/8.x-1.10/pathauto.install#L304
  // Based on the following comment:
  // https://www.drupal.org/project/pathauto/issues/2925169#comment-14636138

  // Load all pattern configuration entities.
  foreach (\Drupal::configFactory()->listAll('pathauto.pattern.') as $pattern_config_name) {
    $pattern_config = \Drupal::configFactory()->getEditable($pattern_config_name);

    // Loop patterns and swap the node_type plugin by the entity_bundle:node
    // plugin.
    if ($pattern_config->get('type') === 'canonical_entities:node') {
      $selection_criteria = $pattern_config->get('selection_criteria');
      foreach ($selection_criteria as $uuid => $condition) {
        if ($condition['id'] === 'node_type') {
          $pattern_config->set("selection_criteria.$uuid.id", 'entity_bundle:node');
          $pattern_config->save();
          break;
        }
      }
    }
  }
}
